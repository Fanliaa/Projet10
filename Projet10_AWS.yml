#########################################################################
#                     Projet 10 OpenClassRooms - AWS                    #
#########################################################################

# Initialisation du template
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC + Infrastructure Template P10

########## Definition des parametres de notre infrastructure ##########

Parameters:
  VpcID:
    Type: String
    Description: Identifiant de mon VPC


########## Definition des Ressources necessaires pour notre reseau ##########

Resources:

# Creation de notre VPC
  MonVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 172.18.1.0/24
      Tags:
        - Key: Name
          Value: "MonVPC"

########## Creation de nos sous-reseaux prives et publics ##########

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [0, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 8]]
      Tags:
        - Key: Name
          Value: "MainVPC-private-a"
      VpcId: !Ref MonVPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [1, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 8]]
      Tags:
        - Key: Name
          Value: "MainVPC-private-b"
      VpcId: !Ref MonVPC

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1c
      CidrBlock: !Select [2, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 8]]
      Tags:
        - Key: Name
          Value: "MainVPC-private-c"
      VpcId: !Ref MonVPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [3, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 8]]
      Tags:
        - Key: Name
          Value: "MainVPC-public-a"
      VpcId: !Ref MonVPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [4, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 8]]
      Tags:
        - Key: Name
          Value: "MainVPC-public-b"
      VpcId: !Ref MonVPC

########## Creation de la passerelle internet ##########

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MainVPC-InternetGateway"

# Rattachement de la passerelle internet
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MonVPC
      InternetGatewayId: !Ref InternetGateway

########## Reservation d'une Elastic IP ##########

  NatEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NatEipB:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc

########## Creation des passerelles NAT ##########    

  NatGatewayA:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref PublicSubnetA
      # Tags:
      #   - Key: Name
      #     Value: "MainVPC-nat-a"

  NatGatewayB:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipB.AllocationId
      SubnetId: !Ref PublicSubnetB
      # Tags:
      #   - Key: Name
      #     Value: "MainVPC-nat-b"

########## Definition de la table de routage ##########

# Table de routage pour le sous-reseau A
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-a
  
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
      MapIpPublicOnLaunch: True

# Table de routage pour le sous-reseau B
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-b
  
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
      MapIpPublicOnLaunch: True

########## Definition de la table de routage privee ##########

# Table de routage pour le sous-reseau prive A
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-private-a
  
  AttachPrivateRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA

# Table de routage pour le sous-reseau prive B
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-private-b
  
  AttachPrivateRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB

# Table de routage pour le sous-reseau prive C
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-private-c

  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

# Creation du groupe de securite (firewall virtuel)
  WebsiteEC2SecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 Security Group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcID


########## Mise en place de la partie publique de l'infrastructure ##########

# Creation du repartiteur de charge
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  WebsiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MonVPC

# Creation de l'auto scaling group
  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !RefWebSiteLaunchConfig
      # AvailabilityZones:
      #   - Fn::Select:
      #     - 0
      #     - Fn::GetAZs: !Ref AWS::Region
      #   - Fn::Select:
      #     - 1
      #     - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      DesiredCapacity: 1
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref WebsiteTargetGroup

  WebsiteLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: ami-04e905a52ec8010b2
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
