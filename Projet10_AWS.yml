#########################################################################
#                     Projet 10 OpenClassRooms - AWS                    #
#########################################################################

# Initialisation du template
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC + Infrastructure Template P10

########## Definition des parametres pour nos outils ##########

Parameters:
  DBName:
    Default: WordpressDB
    Description: Nom de la BDD Wordpress
    Type: String

  DBUser:
    Default: wpuser
    Description: Nom de l'utilisateur Wordpress
    Type: String

  DBPassword:
    Default: BtssioWP13!
    Description: Mon de passe de la BDD Wordpress
    Type: String

  DBClass:
    Default: db.t2.micro
    Description: CatÃ©gorie/Classe de notre instance RDS
    Type: String

########## Definition des Ressources necessaires pour notre reseau ##########

Resources:

# Creation de notre VPC
  MonVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 172.18.1.0/24
      Tags:
        - Key: Name
          Value: "MonVPC"

########## Creation de nos sous-reseaux prives et publics ##########

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1a
      CidrBlock: !Select [0, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 5]]
      Tags:
        - Key: Name
          Value: "MainVPC-private-a"
      VpcId: !Ref MonVPC
      
  PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-west-1c
        CidrBlock: !Select [1, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 5]]
        Tags:
          - Key: Name
            Value: "MainVPC-private-b"
        VpcId: !Ref MonVPC

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1c
      CidrBlock: !Select [2, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 5]]
      Tags:
        - Key: Name
          Value: "MainVPC-private-c"
      VpcId: !Ref MonVPC
        
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1a
      CidrBlock: !Select [3, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 5]]
      Tags:
        - Key: Name
          Value: "MainVPC-public-a"
      VpcId: !Ref MonVPC
      
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1c
      CidrBlock: !Select [4, !Cidr [!GetAtt MonVPC.CidrBlock, 5, 5]]
      Tags:
        - Key: Name
          Value: "MainVPC-public-b"
      VpcId: !Ref MonVPC

########## Creation de la passerelle internet ##########

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MainVPC-InternetGateway"

# Rattachement de la passerelle internet
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MonVPC
      InternetGatewayId: !Ref InternetGateway

########## Definition de la table de routage ##########

# Table de routage pour le sous-reseau A
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-a
  
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA

# Table de routage pour le sous-reseau B
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-b
    
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB

# Creation du groupe de securite (firewall virtuel)
  WebsiteEC2SecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 Security Group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MonVPC

########## Mise en place de la partie publique de l'infrastructure ##########

# Creation du repartiteur de charge
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MonVPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WordPressLaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref TargetGroup

# Creation de l'auto scaling group
  WordPressLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-04e905a52ec8010b2
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      KeyName: Cle_P10
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      # Continuer script bash
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt-get install ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gp
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io
          sudo mkdir /srv/wordpress
          sudo docker run -d -ti -p 80:80 --name WP10 Fanliaa/wordpress_P10:test -v /srv/wordpress:/var/www/html
          sudo docker exec WP10 wp core config --dbname=DBWordpress --dbuser=wpuser --dbpass=WPbtssio11! --dbhost=${MyDB.Endpoint.Address}:3306 --allow-root
          sudo docker exec WP10 wp core install --url=http://${LoadBalancer.DNSName} --title=WordPress P10 --admin_user=fj --admin_password=Toto66! --admin_email=toto@toto.com --allow-root

########## Mise en place du service RDS ##########

# Creation du groupe de securite
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MonVPC

# Creation groupe sous-reseau RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Groupe de sous-reseau RDS
      DBSubnetGroupName: RDSGroup
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

# Creation du RDS
  DBWordpress:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: !Ref DBClass
      DBName: !Ref DBName
      Engine: mariadb
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      MultiAZ: True
      DBSubnetGroupName: !Ref DBSubnetGroup
      # VPCSecurityGroups:
      # - !GetAtt RDSSecurityGroup.GroupId
      DBSecurityGroups:
        - !Ref RDSSecurityGroup