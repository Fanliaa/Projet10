#########################################################################
#                     Projet 10 OpenClassRooms - AWS                    #
#########################################################################

# Initialisation du template
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC + Infrastructure Template P10
########## Definition des parametres pour nos outils ##########

Parameters:
  DBName:
    Default: WordpressDB
    Description: Nom de la BDD Wordpress
    Type: String

  DBUser:
    Default: wpuser
    Description: Nom de l'utilisateur Wordpress
    Type: String

  DBPassword:
    Default: BtssioWP13!
    Description: Mon de passe de la BDD Wordpress
    Type: String

  DBClass:
    Default: db.t2.micro
    Description: Cat√©gorie/Classe de notre instance RDS
    Type: String

  IDWP:
    Default: fj
    Description: Nom compte admin Wordpress
    Type: String

  PasswordWP:
    Default: Toto66!
    Description: Mot de passe Admin wordpress
    Type: String
  
  MailWP:
    Default: toto@toto.com
    Description: Mail Wordpress
    Type: String
  
  MailAlarm:
    Default: la-poubelle00@hotmail.com
    Description: Mail pour les alertes EC2
    Type: String

########## Definition des Ressources necessaires pour notre reseau ##########

Resources:

# Creation de notre VPC
  MonVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsHostnames: true
      EnableDnsSupport: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: "MonVPC"

########## Creation de nos sous-reseaux prives et publics ##########

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      # AvailabilityZone: eu-west-3a
      AvailabilityZone: us-west-1a
      CidrBlock: 10.0.101.0/24
      Tags:
        - Key: Name
          Value: MonVPC-private-a
      VpcId: !Ref MonVPC
      
  PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        # AvailabilityZone: eu-west-3b
        AvailabilityZone: us-west-1c
        CidrBlock: 10.0.102.0/24
        Tags:
          - Key: Name
            Value: MonVPC-private-b
        VpcId: !Ref MonVPC

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      # AvailabilityZone: eu-west-3c
      AvailabilityZone: us-west-1c
      CidrBlock: 10.0.103.0/24
      Tags:
        - Key: Name
          Value: MonVPC-private-c
      VpcId: !Ref MonVPC
        
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      # AvailabilityZone: eu-west-3a
      AvailabilityZone: us-west-1a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: MonVPC-public-a
      VpcId: !Ref MonVPC
      
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      # AvailabilityZone: eu-west-3b
      AvailabilityZone: us-west-1c
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: MonVPC-public-b
      VpcId: !Ref MonVPC

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      # AvailabilityZone: eu-west-3a
      AvailabilityZone: us-west-1c
      CidrBlock: 10.0.3.0/24
      #A SUPPRIMER UNE FOIS TOUT OK!!!
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MonVPC-public-c
      VpcId: !Ref MonVPC

########## Creation de la passerelle internet Pour les reseaux publics A et B ##########

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MonVPC-InternetGateway

# Rattachement de la passerelle internet
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MonVPC
      InternetGatewayId: !Ref InternetGateway

########## Creation de la NAT Gateway Pour le reseau prive C ##########
  NatEIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPC.AllocationId
      SubnetId: !Ref PublicSubnetC
      ConnectivityType: public
      Tags:
        - Key: Name
          Value: natgateway-private-c
    DependsOn: AttachInternetGateway

########## Definition de la table de routage ##########

# Table de routage pour le sous-reseau A
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MonVPC-route-public-a
  
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA

# Table de routage pour le sous-reseau B
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MonVPC-route-public-b
    
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  
  # Table de routage pour le sous-reseau public C, VPN
  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MonVPC-route-public-c
  
  AttachPublicRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      SubnetId: !Ref PublicSubnetC
  
  PublicRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableC

  # Table de routage pour le sous-reseau prive C, VPN
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonVPC
      Tags:
        - Key: Name
          Value: MonVPC-route-private-c
  
  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC
  
  DefaultRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTableC
    DependsOn: NatGateway
  
  VPNRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 192.168.56.0/24
      InstanceId: !Ref VPNInstance
      RouteTableId: !Ref PrivateRouteTableC
    DependsOn: NatGateway

# Creation du groupe de securite (firewall virtuel)
  WebsiteEC2SecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 Security Group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        # - IpProtocol: -1
        #   CidrIp: 10.0.102.0/24
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        #   CidrIp: 10.0.102.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 10.0.102.0/24
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 53
        #   ToPort: 53
        #   CidrIp: 10.0.102.0/24       
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        # - IpProtocol: icmp
        #   FromPort: -1
        #   ToPort: -1
        #   CidrIp: 10.0.102.0/24
      VpcId: !Ref MonVPC

########## Mise en place de la partie publique de l'infrastructure ##########

# Creation du repartiteur de charge
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MonVPC
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true 
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 300

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WordPressLaunchConfig
      AutoScalingGroupName: AutoscalingWordPress
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref TargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AlarmTopic
          NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR

# Creation de l'auto scaling group
  WordPressLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0d9858aa3c6322f73
      InstanceType: t2.micro
      AssociatePublicIpAddress: false
      InstanceMonitoring: true
      KeyName: Cle_USP10
      SecurityGroups:
        - !Ref WebsiteEC2SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum update
            sudo yum upgrade -y
            sudo mkdir /srv/wordpress
            sudo yum install amazon-efs-utils -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            sudo yum install htop -y
            sudo amazon-linux-extras install docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo mount -t efs -o tls ${StockageEFS}:/ /srv/wordpress
            sudo docker run --volume=/srv/wordpress:/var/www/html -d -ti -p 80:80 --name WP10 fanliaa/wordpress_p10:test
            sudo apt-get install docker-ce docker-ce-cli containerd.io
            if [ ! -d "/srv/wordpress/wp-config.php" ];then
              sudo docker exec WP10 wp core config --dbname=${DBName} --dbuser=${DBUser} --dbpass=${DBPassword} --dbhost=${MyDB.Endpoint.Address}:3306 --allow-root
              sudo docker exec WP10 wp core install --url=http://${LoadBalancer.DNSName} --title=WordPress P10 --admin_user=${IDWP} --admin_password=${PasswordWP} --admin_email=${MailWP} --allow-root
              sudo docker exec WP10 wp plugin install amazon-s3-and-cloudfront --activate
              sudo docker exec WP10 wp plugin update --all
              sudo docker exec WP10 sed -i "2i\define( 'AS3CF_SETTINGS', serialize( array( 'provider' => 'aws', 'access-key-id' => '${MyAccessKeyS3}', 'secret-access-key' => '${MyAccessKeyS3.SecretAccessKey}', 'bucket' => '${BucketS3}', 'copy-to-s3' => true, 'serve-from-s3' => true, )));\n" wp-config.php
            else
              echo "Le fichier wp-config existe d√©j√†."
            fi
    DependsOn:
      - "MonVPC"
      - "MountTargetA"
      - "MountTargetB"
      - "LoadBalancer"

########## Mise en place du service RDS ##########

# Creation du groupe de securite RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.101.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.102.0/24
      VpcId: !Ref MonVPC

# Creation groupe sous-reseau RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Groupe de sous-reseau RDS
      DBSubnetGroupName: RDSGroup
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

# Creation du RDS
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: !Ref DBClass
      DBName: !Ref DBName
      Engine: mariadb
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      MultiAZ: True
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId

########## Mise en place de l'EFS pour Wordpress ##########

# Creation du groupe de securite EFS
  SecurityGroupEFS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 2049
        #   ToPort: 2049
        #   CidrIp: 10.0.101.0/24
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0 
        # - IpProtocol: tcp
        #   FromPort: 111
        #   ToPort: 111
        #   CidrIp: 10.0.101.0/0 
      VpcId: !Ref MonVPC

  # Creation des cibles de montage pour chaque Subnet
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref StockageEFS
      SubnetId: !Ref PublicSubnetA
      SecurityGroups: 
        - !Ref SecurityGroupEFS

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref StockageEFS
      SubnetId: !Ref PublicSubnetB
      SecurityGroups: 
        - !Ref SecurityGroupEFS

  # Creation du EFS
  StockageEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: false
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: NomTest

########## Mise en place du Bucket S3 pour les images Wordpress ##########
# Creation d'un utilisateur pour Bucket S3
  GroupeS3:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Administrator

  UserS3:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  
  MyAccessKeyS3:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref UserS3
  
  SecretAccessKeyS3:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString: !Join
        - ""
        - - '{"AccessKeyId":"'
          - !Ref MyAccessKeyS3
          - '","SecretAccessKey":"'
          - !GetAtt MyAccessKeyS3.SecretAccessKey
          - '"}'

# Creation du Bucket S3
  BucketS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucket-projet-aws
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

########## Mise en place des alerte et parametres de surveillance ##########

# Ajout et suppresion d instance EC2 si charge importante ou non
  AugmentationCharge:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteScalingGroup
      ScalingAdjustment: 1
      Cooldown: '300'
    DependsOn: WebsiteScalingGroup

  DiminutionCharge:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteScalingGroup
      ScalingAdjustment: -1
      Cooldown: '300'
    DependsOn: WebsiteScalingGroup

# Ajout adresse mail d'alerte
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Mail pour alerte AWS
      Subscription:
          - Endpoint: !Ref MailAlarm
            Protocol: email

# Parametrage des parametres de l alarme CPU
  AlarmCPUHight:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarme instances EC2
      AlarmActions:
        - !Ref AugmentationCharge
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebsiteScalingGroup
    DependsOn: WebsiteScalingGroup

  AlarmCPULow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarme instances EC2
      AlarmActions:
        - !Ref DiminutionCharge
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebsiteScalingGroup
    DependsOn: WebsiteScalingGroup

########## Creation des instances EC2 en reseau prive C ##########
# Groupe de securite pour le VPN
  VPNSecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 Security Group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MonVPC

# Groupe de securite pour la vm intranet
  IntranetSecurityGroup:
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 Security Group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 111
          ToPort: 111
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 111
          ToPort: 111
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MonVPC

# Instance EC2 pour Intranet
  EC2Intranet:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fd026dbc511a26fe
      InstanceType: t2.micro
      KeyName: Cle_USP10
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          GroupSet: 
            - Ref: IntranetSecurityGroup
          SubnetId: !Ref PrivateSubnetC
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo apt install nfs-common -y
            sudo mkdir /var/www/html/nfs
            sudo ip route add 10.35.20.0/24 via ${VPNInstance.PrivateIp}
            sudo ip route add 192.168.1.0/24 via ${VPNInstance.PrivateIp}
            sudo mount -v -t nfs 192.168.1.25:/srv/intranet /var/www/html/nfs

# Instance EC2 pour le VPN
  VPNInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fa5af1a7c44ebe49
      InstanceType: t2.micro
      KeyName: Cle_USP10
      SourceDestCheck: false
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          GroupSet:
            - Ref: VPNSecurityGroup
          SubnetId: !Ref PrivateSubnetC

  BastionEC2:  
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-024527629f55e9322
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref VPNSecurityGroup
      SubnetId: !Ref PublicSubnetC
      SourceDestCheck: false
      KeyName: Cle_USP10
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            sudo apt update
            sudo apt upgrade -y